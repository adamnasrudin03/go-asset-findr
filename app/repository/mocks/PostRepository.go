// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/adamnasrudin03/go-asset-findr/app/dto"
	mock "github.com/stretchr/testify/mock"

	models "github.com/adamnasrudin03/go-asset-findr/app/models"
)

// PostRepository is an autogenerated mock type for the PostRepository type
type PostRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *PostRepository) Create(ctx context.Context, req dto.PostCreateReq) (*dto.PostRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dto.PostRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.PostCreateReq) (*dto.PostRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.PostCreateReq) *dto.PostRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PostRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.PostCreateReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *PostRepository) GetAll(ctx context.Context) ([]dto.PostRes, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []dto.PostRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.PostRes, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.PostRes); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.PostRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetail provides a mock function with given fields: ctx, req
func (_m *PostRepository) GetDetail(ctx context.Context, req dto.PostGetReq) (*dto.PostRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetDetail")
	}

	var r0 *dto.PostRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.PostGetReq) (*dto.PostRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.PostGetReq) *dto.PostRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PostRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.PostGetReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailTag provides a mock function with given fields: ctx, req
func (_m *PostRepository) GetDetailTag(ctx context.Context, req dto.TagGetReq) (*models.Tag, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetDetailTag")
	}

	var r0 *models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.TagGetReq) (*models.Tag, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.TagGetReq) *models.Tag); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.TagGetReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPostRepository creates a new instance of PostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostRepository {
	mock := &PostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
